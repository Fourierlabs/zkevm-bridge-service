/**
* Bridge service.
**/

syntax = "proto3";
package bridge.v1;

import "google/api/annotations.proto";
import "proto/src/proto/bridge/v1/interface.proto";

option go_package = "github.com/0xPolygonHermez/zkevm-bridge-service/bridgetree/pb";

service BridgeService {
    // Getters
    /// Get api version
    rpc CheckAPI(CheckAPIRequest) returns (CheckAPIResponse) {
        option (google.api.http) = {
            get: "/api"
        };
    }

    /// Get bridges for the destination address both in L1 and L2
    rpc GetBridges(GetBridgesRequest) returns (GetBridgesResponse) {
        option (google.api.http) = {
            get: "/bridges/{dest_addr}"
        };
    }

    /// Get the merkle proof for the specific deposit
    rpc GetProof(GetProofRequest) returns (GetProofResponse) {
        option (google.api.http) = {
            get: "/merkle-proof"
        };
    }

    /// Get the specific deposit
    rpc GetBridge(GetBridgeRequest) returns (GetBridgeResponse) {
        option (google.api.http) = {
            get: "/bridge"
        };
    }

    /// Get claims for the specific smart contract address both in L1 and L2
    rpc GetClaims(GetClaimsRequest) returns (GetClaimsResponse) {
        option (google.api.http) = {
            get: "/claims/{dest_addr}"
        };
    }

    /// Get token wrapped for the specific smart contract address both in L1 and L2
    rpc GetTokenWrapped(GetTokenWrappedRequest) returns (GetTokenWrappedResponse) {
        option (google.api.http) = {
            get: "/tokenwrapped"
        };
    }
}
